apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.robertgmelo.i18nfallbackapp"
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        resConfigs "en", "ar", "ar_XB", "az_AZ", "bg", "bn_BD", "ca_ES", "cs", "da", "de", "el",
                "en_AU", "en_CA", "en_EZ", "en_GB", "en_IN", "en_XA", "en_XM", "en_ZG", "es",
                "es_419", "es_US", "fa", "fi", "fr", "fr_CA", "hi", "hr", "hu", "in", "it", "iw",
                "ja", "km_KH", "ko", "mk_MK", "mr_IN", "ms_MY", "my_MM", "nb", "nl", "pl",
                "pt", "pt_BR", "pt_PT", "ro", "ru", "si_LK", "sk", "sl", "sr", "sr_Latn", "sv",
                "ta_IN", "th", "tl", "tr", "uk", "ur_PK", "vi", "zh_CN", "zh_HK", "zh_TW"
//        resConfigs getSupportedLanguages()

    }
    
    lintOptions {
        abortOnError false
    }

    buildTypes {
        debug {
            pseudoLocalesEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    // https://mvnrepository.com/artifact/com.googlecode.libphonenumber/libphonenumber
    compile group: 'com.googlecode.libphonenumber', name: 'libphonenumber', version: '8.12.6'
}
repositories {
    mavenCentral()
}

def String[] getSupportedLanguages() {
    def langList = []
    def resDirs = new File(getProjectDir().name + File.separator + "src" + File.separator + "main"
            + File.separator + "res")
    def pattern1 = /^values$/
    def pattern2 = /^values-([a-z]{2,3}|[a-z]{2,3}-r[A-Z]{2})$/
    def pattern3 = /^values-b\+([a-z]{2,3}|[a-z]{2,3}\+[A-Z]{2}|[a-z]{2,3}\+\w{3,4})$/

    resDirs.eachDirMatch(~/^values.*/) {
        if (directoryEmpty(resDirs.toString() + File.separator + it.name)) return
        if (it.name ==~ pattern1) {
            langList << 'en'
        } else if (it.name ==~ pattern2) {
            def match = it.name =~ pattern2
            langList << match[0][1]
        } else if (it.name ==~ pattern3) {
            def match = it.name =~ pattern3
            langList << match[0][1].replace('+', '_')
        }

        langList << 'en_XA'
        langList << 'ar_XB'
    }

    return langList.sort()
}

def boolean directoryEmpty(String path) {
    def dir = new File(path)
    if (!dir.directory) return true
    return dir.list().length == 0
}

task(showResourceConfigs) {
    doLast {
        println "Languages Supported: " + getSupportedLanguages()
    }
}

preBuild.dependsOn(showResourceConfigs)
